// Code generated by hertz generator.

package main

import (
	"bytes"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/fsnotify/fsnotify"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

// hz update -idl
func main() {
	h := server.Default(server.WithHostPorts("127.0.0.1:8080"))

	go func() {
		register(h)
		h.Spin()
	}()
	watchIdl()

	select {}
}

func watchIdl() {
	// 创建一个新的监控器
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal(err)
	}
	defer watcher.Close()

	// 需要监控的文件夹路径
	dirToWatch := "/Users/xiaofeng/workplace_go/Go-learning/api_gateway/idl"

	// 递归添加文件夹及其子文件夹到监控列表
	err = filepath.Walk(dirToWatch, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return watcher.Add(path)
		}
		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	// 用于记录文件的变化时间
	changes := make(map[string]time.Time)

	// Goroutine 处理监控事件
	go func() {
		fmt.Println("kitex_server watching: " + dirToWatch)
		for {
			select {
			case event, ok := <-watcher.Events:
				if !ok {
					return
				}
				// 忽略以 ~ 结尾的临时文件
				if strings.HasSuffix(event.Name, "~") {
					continue
				}
				if event.Op&fsnotify.Write == fsnotify.Write || event.Op&fsnotify.Create == fsnotify.Create {
					changes[event.Name] = time.Now()
				}
			case err, ok := <-watcher.Errors:
				if !ok {
					return
				}
				fmt.Println("错误:", err)
			}
		}
	}()

	// 检查变化的文件，并在变化后 3 秒输出文件名
	go func() {
		for {
			time.Sleep(1 * time.Second)
			for file, changeTime := range changes {
				if time.Since(changeTime) >= 3*time.Second {
					//fmt.Println("change", file)
					updateHz := fmt.Sprintf("hz update -idl %s", file)
					doUpdateIdl(updateHz)
					delete(changes, file)
				}
			}
		}
	}()

	// 保持程序运行
	done := make(chan bool)
	<-done
}

func doUpdateIdl(command string) {
	fmt.Println("hz_server do ", command)

	// 将环境切换到当前目录
	changeToExecDir()

	// 创建一个 ls 命令
	cmd := exec.Command("/bin/sh", "-c", command)

	// 获取命令的输出和错误输出
	var out bytes.Buffer
	var stderr bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &stderr

	// 运行命令
	err := cmd.Run()
	if err != nil {
		log.Fatalf("命令执行失败: %s, %s", err.Error(), stderr.String())
	}
	// 打印输出
	//log.Println(out.String())
}

func changeToExecDir() {

	// 将当前工作目录更改为执行程序所在目录
	err := os.Chdir("/Users/xiaofeng/workplace_go/Go-learning/api_gateway/student_client/http_hz_server")
	if err != nil {
		log.Fatalf("更改工作目录失败: %v", err)
	}

	// 获取更改后的当前工作目录
	_, err = os.Getwd()
	if err != nil {
		log.Fatalf("获取更改后的工作目录失败: %v", err)
	}
	//fmt.Printf("更改后的当前工作目录: %s\n", newCurrentDir)
}
